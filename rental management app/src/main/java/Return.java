
import java.awt.event.KeyEvent;
import java.io.FileWriter;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Time;
import java.sql.Timestamp;
import java.time.Duration;
import java.time.LocalDateTime;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author Lucas
 */
public class Return extends javax.swing.JFrame {

    /**
     * Creates new form Return
     */
    public Return() {
        initComponents();
        table_update();
    }
    Connection con;
    PreparedStatement pst;
    ResultSet rs;
    ResultSet rsnew;
    final int fineconst = 300;
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtbikeid = new javax.swing.JTextField();
        txtcustomerid = new javax.swing.JTextField();
        txtdate = new javax.swing.JTextField();
        txttime = new javax.swing.JTextField();
        txtfine = new javax.swing.JTextField();
        confirm_button = new javax.swing.JButton();
        cancel_button = new javax.swing.JButton();
        search_button = new javax.swing.JButton();
        txtaddhours = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtfinalcost = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("Return page");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Bicycle information"));

        jLabel2.setText("Bicycle ID");

        jLabel3.setText("Customer ID");

        jLabel5.setText("Actual Hours elapsed");

        jLabel6.setText("Additional costs");

        txtbikeid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtbikeidActionPerformed(evt);
            }
        });
        txtbikeid.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtbikeidKeyPressed(evt);
            }
        });

        txtcustomerid.setEditable(false);

        txtfine.setEditable(false);

        confirm_button.setText("Confirm");
        confirm_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirm_buttonActionPerformed(evt);
            }
        });

        cancel_button.setText("Cancel");
        cancel_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancel_buttonActionPerformed(evt);
            }
        });

        search_button.setText("Search");
        search_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                search_buttonActionPerformed(evt);
            }
        });

        txtaddhours.setEditable(false);

        jLabel7.setText("Additional hours");

        txtfinalcost.setEditable(false);

        jLabel8.setText("Final cost");

        jLabel4.setText("Date (dd/mm/yyyy)");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(35, 35, 35)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(txtbikeid, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtdate, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(17, 17, 17)
                                .addComponent(jLabel4)))
                        .addGap(55, 55, 55)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(confirm_button)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancel_button)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel3)
                                    .addComponent(txttime, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(search_button, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(txtcustomerid, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addComponent(jLabel2)
                        .addGap(64, 64, 64)
                        .addComponent(jLabel5))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(6, 6, 6)
                                        .addComponent(txtaddhours, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jLabel7)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtfine, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtfinalcost, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addContainerGap(81, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtbikeid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txttime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(search_button))
                .addGap(41, 41, 41)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addGap(9, 9, 9)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtdate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtcustomerid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(52, 52, 52)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtfine, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtaddhours, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtfinalcost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(confirm_button)
                    .addComponent(cancel_button))
                .addContainerGap())
        );

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Customer ID", "Bike ID", "Start time", "Planned end Time", "Hours elapsed"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 507, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(22, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(17, 17, 17))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(44, 44, 44))))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void table_update(){
       int c;
        try {
            Class.forName("com.mysql.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost/bikerent","root","");
            pst = con.prepareStatement("select * from rental");
            ResultSet Rs = pst.executeQuery();
            ResultSetMetaData rd = Rs.getMetaData();
            c = rd.getColumnCount();
            DefaultTableModel d1 = (DefaultTableModel)jTable1.getModel();
            d1.setRowCount(0);
            while(Rs.next()){
                Vector v2 = new Vector();
                //calculating additional costs incurred due to late return time
                LocalDateTime starttime = Rs.getTimestamp("start_time").toLocalDateTime();
                LocalDateTime returntime = Rs.getTimestamp("planned_return_time").toLocalDateTime();
                //Calculating difference between dates in terms of hours
                int hours = (int) Duration.between(starttime, returntime).toHours();
                for(int i=1;i<c;i++){
                    v2.add(Rs.getString("customer_id"));
                    v2.add(Rs.getString("bikeID"));
                    v2.add(Rs.getString("start_time"));
                    v2.add(Rs.getString("planned_return_time"));
                    v2.add(hours);
                }
                d1.addRow(v2);
            }
            
        } catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(customer.class.getName()).log(Level.SEVERE, null, ex);
        }
            
    }
    
    private void txtbikeidActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtbikeidActionPerformed
    }//GEN-LAST:event_txtbikeidActionPerformed

    private void txtbikeidKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtbikeidKeyPressed

    }//GEN-LAST:event_txtbikeidKeyPressed

    private void confirm_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirm_buttonActionPerformed
        // TODO add your handling code here:
        String bike_id = txtbikeid.getText();
        String customer_id = txtcustomerid.getText();
        String date = txtdate.getText();
        String time_elapsed = txttime.getText();
        String fine = txtfine.getText();
        String paid = txtfinalcost.getText();
        String model = "";
        String pattern = "^\\d{2}/\\d{2}/\\d{4}$"; //expression for dd/mm/yyyy
        if(bike_id.isBlank() || customer_id.isBlank() || !date.matches(pattern) || time_elapsed.isBlank() || fine.isBlank()){
            //handling validation failure
            JOptionPane.showMessageDialog(this, "All fields are required");
            return;
        }
        //get instance of identitymap class
        IdentityMap identityMap = IdentityMap.getInstance();
        //checking if bike being returned exists in identity map
        if(identityMap.isBikeRented(bike_id)){
            rent rental = identityMap.getRental(bike_id);
            model = rental.getModel();
        }
        else{
            try {
                //if bike does not exist in identity map
                Class.forName("com.mysql.jdbc.Driver");
                con = DriverManager.getConnection("jdbc:mysql://localhost/bikerent","root","");
                //finds the bike model of bike id requested
                pstnew = con.prepareStatement("select model from registration where bikeID=?");
                pstnew.setString(1, bike_id);
                rsnew = pstnew.executeQuery();
                if(rsnew.next()){
                    model = rsnew.getString("model");
                }
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(Return.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(Return.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        try {
            Class.forName("com.mysql.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost/bikerent","root","");
            //insert into database
            pst = con.prepareStatement("insert into returnbike(bike_id,customer_id,return_date,time_elapsed,fine,paid,model)values(?,?,?,?,?,?,?)");
            pst.setString(1, bike_id);
            pst.setString(2, customer_id);
            pst.setString(3, date);
            pst.setString(4, time_elapsed);
            pst.setString(5, fine);
            pst.setString(6, paid);
            pst.setString(7, model);
            pst.executeUpdate();
                        
            //delete record of rental purchase from rental table
            pst2 = con.prepareStatement("Delete from rental where bikeID = ?");
            pst2.setString(1, bike_id);
            pst2.executeUpdate();
            SendInvoice();
            JOptionPane.showMessageDialog(this, "Database updated");
            
            
            
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Return.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Return.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(Return.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        //inserting record into transaction file
        try{
            FileWriter Writer = new FileWriter("transaction.txt");
            Writer.append(date+" "+bike_id+" "+customer_id+" "+paid+" "+time_elapsed);
            //Writer.write(System.getProperty("line.seperator"));
            Writer.close();
            setVisible(false);
            new Return().setVisible(true);
            
        }
        catch (Exception e)
        {
            JOptionPane.showMessageDialog(null, "Failed to write to file");
        }
           
        
    }//GEN-LAST:event_confirm_buttonActionPerformed
    private void SendInvoice() throws Exception{
        String customer_id = txtcustomerid.getText();
        String customerEmail = "";
        String customerName = "";
        
        try(Connection conn = DriverManager.getConnection("jdbc:mysql://localhost/bikerent","root","")){
            //retrieving email of customer
            String sql = "SELECT customer_name, email FROM customer WHERE customer_id =?";
            PreparedStatement pst = conn.prepareStatement(sql);
            pst.setString(1, customer_id);
            ResultSet rs = pst.executeQuery();
            
            while (rs.next()){
                customerEmail = rs.getString("email");
                customerName = rs.getString("customer_name");
            }
            
            sql = "SELECT model, paid, fine FROM returnbike WHERE customer_id = ?";
            pst = conn.prepareStatement(sql);
            pst.setString(1, customer_id);
            rs = pst.executeQuery();
            
            String bikeModel = "";
            double amountPaid = 0.0;
            double fine = 0.0;
            while(rs.next()){
                bikeModel = rs.getString("model");
                amountPaid = rs.getDouble("paid");
                fine = rs.getDouble("fine");
            }
            Mail.sendMail(customerEmail, false, customerName, bikeModel, amountPaid, fine);
        } catch (SQLException e){
            e.printStackTrace();
        }
    }
    private void cancel_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancel_buttonActionPerformed
        // TODO add your handling code here:
        this.hide();
    }//GEN-LAST:event_cancel_buttonActionPerformed

    private void search_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_search_buttonActionPerformed
        String bike_id = txtbikeid.getText();
        if(!bike_id.matches("^B\\d+$") || txttime.getText().isBlank()){
            JOptionPane.showMessageDialog(this, "Input data is formatted incorrectly");
            return;
        }
        int hours_elapsed = Integer.parseInt(txttime.getText());
        //get instance of identitymap class
        IdentityMap identityMap = IdentityMap.getInstance();
        //checking if bike being returned exists in identity map
        if(identityMap.isBikeRented(bike_id)){
            rent rental = identityMap.getRental(bike_id);
            String customer_id = rental.getCustomerID();
            int hours = rental.getHours();
            int totalCost = rental.getTotalCost();
            txtcustomerid.setText(customer_id.trim());
            int additional_hours = hours_elapsed - hours;
            //calculate total cost of rental
            if (additional_hours > 0){
                txtaddhours.setText(String.valueOf(additional_hours));
                int fine = additional_hours * fineconst;
                txtfine.setText(String.valueOf(fine));
                int finalcost = fine + totalCost;
                txtfinalcost.setText(String.valueOf(finalcost));
            }
            else{
                txtaddhours.setText("0");
                txtfine.setText("0");
                txtfinalcost.setText(String.valueOf(totalCost));
            }
            System.out.println("Used the identity map");
            return;
        }
        
        try {
                System.out.println("Retrieved from database");
                Class.forName("com.mysql.jdbc.Driver");
                con = DriverManager.getConnection("jdbc:mysql://localhost/bikerent","root","");
                //query for valid bike id
                pst = con.prepareStatement("select bikeID,customer_id,total_cost, start_time, planned_return_time from rental where bikeID=? ");
                pst.setString(1,bike_id);
                rs = pst.executeQuery();
                if(rs.next() == false){
                    JOptionPane.showMessageDialog(this, "Bike ID not found");
                }
                else{
                    //getting customer_id and cost from rental table in database
                    String customer_id = rs.getString("customer_id");
                    txtcustomerid.setText(customer_id.trim());
                    int total_cost = rs.getInt("total_cost");
                    JOptionPane.showMessageDialog(this, "Customer ID found");
                                        
                    //calculating additional costs incurred due to late return time
                    LocalDateTime starttime = rs.getTimestamp("start_time").toLocalDateTime();
                    LocalDateTime returntime = rs.getTimestamp("planned_return_time").toLocalDateTime();
                    //Calculating difference between dates in terms of hours
                    int hours = (int) Duration.between(starttime, returntime).toHours();
                    int additional_hours = hours_elapsed - hours;
                    
                    if (additional_hours > 0){
                        txtaddhours.setText(String.valueOf(additional_hours));
                        int fine = additional_hours * fineconst;
                        txtfine.setText(String.valueOf(fine));
                        int finalcost = fine + total_cost;
                        txtfinalcost.setText(String.valueOf(finalcost));
                                            }
                    else{
                        txtaddhours.setText("0");
                        txtfine.setText("0");
                        txtfinalcost.setText(String.valueOf(total_cost));
                    }
                }
                
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(Return.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(Return.class.getName()).log(Level.SEVERE, null, ex);
            }
    }//GEN-LAST:event_search_buttonActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        DefaultTableModel d1 = (DefaultTableModel)jTable1.getModel();
        int selectIndex = jTable1.getSelectedRow();
        txtbikeid.setText(d1.getValueAt(selectIndex, 1).toString());
        txtcustomerid.setText(d1.getValueAt(selectIndex, 0).toString());
    }//GEN-LAST:event_jTable1MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Return.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Return.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Return.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Return.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Return().setVisible(true);
            }
        });
    }
    
    PreparedStatement pst1;
    PreparedStatement pst2;
    PreparedStatement pstnew;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancel_button;
    private javax.swing.JButton confirm_button;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton search_button;
    private javax.swing.JTextField txtaddhours;
    private javax.swing.JTextField txtbikeid;
    private javax.swing.JTextField txtcustomerid;
    private javax.swing.JTextField txtdate;
    private javax.swing.JTextField txtfinalcost;
    private javax.swing.JTextField txtfine;
    private javax.swing.JTextField txttime;
    // End of variables declaration//GEN-END:variables
}
