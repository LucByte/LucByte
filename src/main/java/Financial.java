
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Collectors;
import javax.swing.JOptionPane;

import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;


/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author Lucas
 */
public class Financial extends javax.swing.JFrame {

    /**
     * Creates new form Financial
     */
    public Financial() {
        initComponents();
    }
    Connection con;
    PreparedStatement pst;
    PreparedStatement pst1;
    PreparedStatement pstcsv;
    ResultSet rs;
    ResultSet rs5;
    ResultSet rscsv;
    ResultSet rs6;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jProgressBar1 = new javax.swing.JProgressBar();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        generate_annual_report = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        txtyear1 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        generate_customer_stat_report = new javax.swing.JButton();
        sendemail = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        generate_new_model = new javax.swing.JButton();
        load_old_model = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        exportcsv = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setText("Financial Information");

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        generate_annual_report.setBackground(new java.awt.Color(0, 0, 0));
        generate_annual_report.setText("Generate report");
        generate_annual_report.setBorder(null);
        generate_annual_report.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generate_annual_reportActionPerformed(evt);
            }
        });

        jLabel2.setForeground(new java.awt.Color(0, 0, 0));
        jLabel2.setText("Revenue by Year");

        txtyear1.setText("Enter Year");

        jLabel4.setBackground(new java.awt.Color(0, 0, 0));
        jLabel4.setForeground(new java.awt.Color(0, 0, 0));
        jLabel4.setText("Customer Statistics");

        generate_customer_stat_report.setBackground(new java.awt.Color(0, 0, 0));
        generate_customer_stat_report.setText("Generate Report");
        generate_customer_stat_report.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generate_customer_stat_reportActionPerformed(evt);
            }
        });

        sendemail.setText("Send promotional offer to mailing list");
        sendemail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendemailActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(29, 29, 29)
                        .addComponent(txtyear1, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(61, 61, 61)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(generate_customer_stat_report)
                        .addContainerGap(51, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(generate_annual_report, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(sendemail)
                .addGap(97, 97, 97))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtyear1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(generate_annual_report, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(generate_customer_stat_report, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(51, 51, 51)
                .addComponent(sendemail)
                .addGap(37, 37, 37))
        );

        jPanel2.setBackground(new java.awt.Color(204, 204, 204));

        generate_new_model.setText("Create new model with current data");
        generate_new_model.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generate_new_modelActionPerformed(evt);
            }
        });

        load_old_model.setText("Load old model");
        load_old_model.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                load_old_modelActionPerformed(evt);
            }
        });

        jLabel5.setBackground(new java.awt.Color(255, 255, 255));
        jLabel5.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 0, 0));
        jLabel5.setText("Forecast bicycle demand for following year");

        exportcsv.setBackground(new java.awt.Color(51, 153, 255));
        exportcsv.setForeground(new java.awt.Color(204, 204, 204));
        exportcsv.setText("Export rental data to CSV");
        exportcsv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportcsvActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel5))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(generate_new_model)
                            .addComponent(load_old_model)
                            .addComponent(exportcsv))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addGap(39, 39, 39)
                .addComponent(generate_new_model)
                .addGap(36, 36, 36)
                .addComponent(load_old_model)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                .addComponent(exportcsv)
                .addGap(21, 21, 21))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(48, 48, 48)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(55, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 80, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(97, 97, 97))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void generate_annual_reportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generate_annual_reportActionPerformed
        // TODO add your handling code here:
        String year = txtyear1.getText();
        String total_revenue = "";
        String quarter1_revenue = "";
        String quarter2_revenue = "";
        String quarter3_revenue = "";
        String quarter4_revenue = "";
        //SQL query to retrieve revenues for each quarter of the year
        try {
            Class.forName("com.mysql.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost/bikerent","root","");
            String query = "SELECT\n" +
            "    SUM(paid) AS total_revenue,\n" +
            "    SUM(CASE\n" +
            "        WHEN return_date LIKE '___01%' OR return_date LIKE '___02%' OR return_date LIKE '___03%'\n" +
            "        THEN paid\n" +
            "        ELSE 0\n" +
            "    END) AS quarter1_revenue,\n" +
            "    SUM(CASE\n" +
            "        WHEN return_date LIKE '___04%' OR return_date LIKE '___05%' OR return_date LIKE '___06%'\n" +
            "        THEN paid\n" +
            "        ELSE 0\n" +
            "    END) AS quarter2_revenue,\n" +
            "    SUM(CASE\n" +
            "        WHEN return_date LIKE '___07%' OR return_date LIKE '___08%' OR return_date LIKE '___09%'\n" +
            "        THEN paid\n" +
            "        ELSE 0\n" +
            "    END) AS quarter3_revenue,\n" +
            "    SUM(CASE\n" +
            "        WHEN return_date LIKE '___10%' OR return_date LIKE '___11%' OR return_date LIKE '___12%'\n" +
            "        THEN paid\n" +
            "        ELSE 0\n" +
            "    END) AS quarter4_revenue\n" +
            "FROM returnbike\n" +
            "WHERE return_date LIKE ?";
            pst = con.prepareStatement(query);
            pst.setString(1, '%' + year + '%');
            rs = pst.executeQuery();
            if (rs.next()){
                quarter1_revenue = rs.getString("quarter1_revenue");
                quarter2_revenue = rs.getString("quarter2_revenue");
                quarter3_revenue = rs.getString("quarter3_revenue");
                quarter4_revenue = rs.getString("quarter4_revenue");
                total_revenue = rs.getString("total_revenue");
            }
            
        } catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(Financial.class.getName()).log(Level.SEVERE, null, ex);
        }
        try{
                FileWriter Writer = new FileWriter("financials.txt");
                Writer.write("----------- FINANCIALS FOR YEAR "+year+" ----------- \nTotal Revenue: $"+ total_revenue);
                Writer.append("\nFirst Quarter Revenue: $"+quarter1_revenue);
                Writer.append("\nSecond Quarter Revenue: $"+quarter2_revenue);
                Writer.append("\nThird Quarter Revenue: $"+quarter3_revenue);
                Writer.append("\nFourth Quarter Revenue: $"+quarter4_revenue);
                Writer.append("\n------------------------------------------------");
                Writer.close();
                setVisible(false);
                new Financial().setVisible(true);
            
            }
        catch (IOException e)
        {
            JOptionPane.showMessageDialog(null, "Failed to write to file");
        }
        try{
            File file = new File("financials.txt");
            if(file.exists()){
                Process pro=Runtime.getRuntime().exec("rundll32 url.dll,FileProtocolHandler "+"financials.txt");
                pro.waitFor();
            }
        }
        catch (Exception e){
            JOptionPane.showMessageDialog(null, "Failed to open file");
        }
        
    }//GEN-LAST:event_generate_annual_reportActionPerformed

    private void generate_customer_stat_reportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generate_customer_stat_reportActionPerformed
    //Generating customer stats report
    //includes most popular bike models, number of repeat customers (customer-retention rate)
    //populates arraylist with customer_id from database
        LinkedList<String> customers = new LinkedList<>(); //using linkedlist instead of arraylist because of faster insertion 
        try { 
           Class.forName("com.mysql.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost/bikerent","root","");
            String query = "select customer_id from returnbike";
            pst1 = con.prepareStatement(query); 
            rs5 = pst1.executeQuery();
            while(rs5.next()){
                String customerid = rs5.getString("customer_id");
                customers.add(customerid);
            }
       } catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(Financial.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        //creating hashmap to store frequencies of customers present in arraylist
        Map<String, Integer> frequencyMap = new HashMap<>();
        for (String s: customers){  //iterating through list
            Integer customercount = frequencyMap.get(s); //retrieving current count using customer id as key
            if(customercount==null){
                customercount = 0;}
            //puts updated count for current customer into frequency map
            frequencyMap.put(s, customercount+1);
        }
        int occ_count1=0,occ_count2=0,occ_count3=0,occ_count4ormore=0;
        Iterator<Map.Entry<String,Integer>> iterator = frequencyMap.entrySet().iterator();
        while (iterator.hasNext()){ //iterate through hashmap
            Map.Entry<String, Integer> entry = iterator.next();
            //increment appropriate count based on customer occurence count
            switch (entry.getValue()){
                case 1:
                    occ_count1++;
                    break;
                case 2:
                    occ_count2++;
                    break;
                case 3:
                    occ_count3++;
                    break;
                default:
                    occ_count4ormore++;
                {
                    try {
                        pst1 = con.prepareStatement("select email from customer where customer_id=?");
                        pst1.setString(1, entry.getKey());
                        rs6 = pst1.executeQuery();
                        FileWriter Writer = new FileWriter("mailingList.txt");
                        while(rs6.next()){
                            Writer.append(rs6.getString("email"));
                        }
                        Writer.close();
                    } catch (SQLException | IOException ex) {
                        Logger.getLogger(Financial.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    break;
                }

                    
            }
        }
        //calculating most loyal customer (customer with most orders)
        String maxvaluekey ="";
        int maxValue_map = Collections.max(frequencyMap.values()); // returns max value in Hashmap
        for(Map.Entry<String, Integer> entry : frequencyMap.entrySet()){ //interating through Hashmap
            if(entry.getValue() == maxValue_map){
                maxvaluekey = entry.getKey();
            }
        }
        //Writing information to file
        try{
                FileWriter Writer = new FileWriter("customerstats.txt");
                Writer.write("----------- General Customer Statistics ------------------\n");
                Writer.append("\nRegulars: " + occ_count1 + "   (customers with 1 order)");
                Writer.append("\nRepeat: " + occ_count2 + "     (customers with 2 orders)" );
                Writer.append("\nLoyal: " + occ_count3 + "        (customers with 3 orders)");
                Writer.append("\nSuper-Loyal: " + occ_count4ormore + "        (customers with >4 orders)");
                Writer.append("\n ");
                Writer.append("\nMost Loyal customer: " + maxvaluekey +" => "+maxValue_map + " orders!");
                Writer.append("\n-------------------------------------------------------");
                Writer.close();
            
            }
        catch (IOException e)
        {
            JOptionPane.showMessageDialog(null, "Failed to write to file");
        }
        try{
            File file = new File("customerstats.txt");
            if(file.exists()){
                Process pro=Runtime.getRuntime().exec("rundll32 url.dll,FileProtocolHandler "+"customerstats.txt");
                pro.waitFor();
            }
        }
        catch (Exception e){
            JOptionPane.showMessageDialog(null, "Failed to open file");
        }
        
    }//GEN-LAST:event_generate_customer_stat_reportActionPerformed
    
    private void exportcsvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportcsvActionPerformed

        try {
            Class.forName("com.mysql.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost/bikerent","root","");
            String query = "select return_date,count(paid) from returnbike group by return_date";
            pstcsv = con.prepareStatement(query, ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE); 
            rscsv = pstcsv.executeQuery();
            XSSFWorkbook workbook = new XSSFWorkbook();
            XSSFSheet spreadsheet = workbook.createSheet("bikerental");
            XSSFRow row = spreadsheet.createRow(0);
            XSSFCell cell;
            cell = row.createCell(0);
            cell.setCellValue("Date");
            cell = row.createCell(1);
            cell.setCellValue("Rentals");
            
            //Populating column in excel with all dates in a year
            //creating formatter to format date into dd/mm/yyyy structure
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");
            LocalDate localDateStart = LocalDate.parse("01/01/2023",formatter);
            rscsv.last(); //moves pointer of current ResultSet to last row to get last date
            LocalDate localDateEnd = LocalDate.parse(rscsv.getString("return_date"), formatter);
            List<LocalDate> dateList = localDateStart.datesUntil(localDateEnd.plusDays(1)).collect(Collectors.toList());
            //moves pointer back to first date
            rscsv.first();
            for(int i=1; i<dateList.size()+1 ; i++){
                //Changing localDate back to String
                String currentdate = dateList.get(i-1).format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
                row = spreadsheet.createRow(i);
                cell = row.createCell(0);
                cell.setCellValue(currentdate);
                cell = row.createCell(1);
                if(rscsv.getString("return_date") == null ? currentdate == null : rscsv.getString("return_date").equals(currentdate)){
                    cell.setCellValue(rscsv.getInt("count(paid)"));
                    rscsv.next();
                }
                else{
                    cell.setCellValue(0);
                }
            }
            try (FileOutputStream out = new FileOutputStream(new File("bikerental.xlsx"))) {
                workbook.write(out);
            }
            con.close();
            JOptionPane.showMessageDialog(null, "Exported successfully");
       } catch (ClassNotFoundException | SQLException | IOException ex) {
            Logger.getLogger(Financial.class.getName()).log(Level.SEVERE, null, ex);
        } 
    }//GEN-LAST:event_exportcsvActionPerformed
    private String resolveScriptPath(String path){
        File file = new File("src/main/python/" + path);
        return file.getAbsolutePath();  //running python script with absolute path to script
    }
    private List<String> readProcessOutput(InputStream inputStream) throws IOException {
        try (BufferedReader output = new BufferedReader(new InputStreamReader(inputStream))){
            return output.lines().collect(Collectors.toList());
        }
    }
    private boolean fileExist(String path){
        boolean fileExist = false;
        File file = new File(path);
        if (file.exists()){
            fileExist = true;
            return fileExist;
        }
        else{
            JOptionPane.showMessageDialog(this, "Please create a spreadsheet of data before attempting to create model");
            return fileExist;
        }
    }
    private void generate_new_modelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generate_new_modelActionPerformed
//button that creates new model        
// creating native operating system process to launch python to execute python script
        if(fileExist("bikerental.xlsx")==true){
            ProcessBuilder processBuilder = new ProcessBuilder("python", resolveScriptPath("Plotting_bike_demand.py"));
            processBuilder.redirectErrorStream(true); //error output from script merged with standard output
            try {
                if(fileExist("bike_demand_prediction.h5")){
                    File file = new File("bike_demand_prediction.h5");
                    file.delete();
                }
                Process process = processBuilder.start();
            } catch (IOException ex) {
                Logger.getLogger(Financial.class.getName()).log(Level.SEVERE, null, ex);
                System.out.println("processBuilder API failed");
            }
        }
    }//GEN-LAST:event_generate_new_modelActionPerformed

    private void load_old_modelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_load_old_modelActionPerformed
        // creating native operating system process to launch python to execute python script
        //Create process builder and set working directory
        ProcessBuilder processBuilder = new ProcessBuilder("python", resolveScriptPath("Plotting_bike_demand.py"));
        
        //redirect error stream and start process
        processBuilder.redirectErrorStream(true);
        
        //Create an executor service with fixed no. threads
        ExecutorService executor = Executors.newFixedThreadPool(10);
        //Submit process to executor service for execution
        Future<Integer> future = executor.submit(() -> {
            int exitCode = -1;
            try {
                Process process = processBuilder.start();

                // Capture standard output and error output of the Python process
                InputStream inputStream = process.getInputStream();
                BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream));
                String line;
                while ((line = reader.readLine()) != null) {
                    System.out.println(line);
                }
                //wait for process to exit then print exit code
                exitCode = process.waitFor();
                System.out.println("Process exited with code " + exitCode);

            } catch (IOException ex) {
                Logger.getLogger(Financial.class.getName()).log(Level.SEVERE, null, ex);
                System.out.println("processBuilder API failed");
            } catch (InterruptedException ex) {
                Logger.getLogger(Financial.class.getName()).log(Level.SEVERE, null, ex);
            }
            return exitCode;
        });
        
    }//GEN-LAST:event_load_old_modelActionPerformed

    private void sendemailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendemailActionPerformed
        // TODO add your handling code here:
        BufferedReader reader;
        try {
            reader = new BufferedReader(new FileReader("mailingList.txt"));
            String email;
            List<String> list = new ArrayList<String>();
            while((email = reader.readLine()) != null){
            list.add(email);
        }
        String[] recipients = list.toArray(String[]::new);
        reader.close();
        Mail.sendMail(recipients, true,"", "", 0.0, 0.0);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Financial.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Financial.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(Financial.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_sendemailActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Financial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Financial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Financial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Financial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Financial().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton exportcsv;
    private javax.swing.JButton generate_annual_report;
    private javax.swing.JButton generate_customer_stat_report;
    private javax.swing.JButton generate_new_model;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JButton load_old_model;
    private javax.swing.JButton sendemail;
    private javax.swing.JTextField txtyear1;
    // End of variables declaration//GEN-END:variables
}
